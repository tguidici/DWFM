% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DWFM_algo.R
\name{trunc_M}
\alias{trunc_M}
\title{Truncates an array by magnitude}
\usage{
trunc_M(lambdahat, cutoff = 0.1)
}
\arguments{
\item{lambdahat}{An array}

\item{cutoff}{A cutoff value}
}
\value{
lambdahat where all values between \code{-cutoff} and \code{cutoff} are set to 0
}
\description{
Sets to zero any entries in an array having absolute value below some cutoff.
}
\examples{
covmats_etc <- vector(mode="list", length=2)
for(i in 1:length(covmats_etc)){
 covmats_etc[[i]] <- step0(X[[i]],2)
}
#we need to rotate all lambdahats to the ture Lambda values before sparsifying
lambdahat_proc <- vector(mode="list", length=2)
lambdahat_proc[[1]] <- covmats_etc[[1]]$lambdahat
lambdahat_proc[[2]] <- covmats_etc[[2]]$lambdahat
for(j in 1:length(covmats_etc)){
 for(i in 1:dim(covmats_etc[[j]]$lambdahat)[3]){
  lambdahat_proc[[j]][,,i] <- vegan::procrustes(Lambda_vals[[j]][,,i],
  covmats_etc[[j]]$lambdahat[,,i], scale=FALSE, symmetric=FALSE)$Yrot
 }
}
#sparsify
sps_lambdahat_proc = lambdahat_proc
for(j in 1:length(lambdahat_proc)){
sps_lambdahat_proc$M[[j]] <- trunc_M(lambdahat_proc[[j]])
}
}
